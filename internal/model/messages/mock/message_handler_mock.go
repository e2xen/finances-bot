package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i max.ks1230/project-base/internal/model/messages.MessageHandler -o ./mock/message_handler_mock.go -n MessageHandlerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	apiv1 "max.ks1230/project-base/api/grpc"
)

// MessageHandlerMock implements messages.MessageHandler
type MessageHandlerMock struct {
	t minimock.Tester

	funcAcceptReport          func(ctx context.Context, report *apiv1.ReportResult) (result string, err error)
	inspectFuncAcceptReport   func(ctx context.Context, report *apiv1.ReportResult)
	afterAcceptReportCounter  uint64
	beforeAcceptReportCounter uint64
	AcceptReportMock          mMessageHandlerMockAcceptReport

	funcHandleMessage          func(ctx context.Context, text string, userID int64) (s1 string, err error)
	inspectFuncHandleMessage   func(ctx context.Context, text string, userID int64)
	afterHandleMessageCounter  uint64
	beforeHandleMessageCounter uint64
	HandleMessageMock          mMessageHandlerMockHandleMessage
}

// NewMessageHandlerMock returns a mock for messages.MessageHandler
func NewMessageHandlerMock(t minimock.Tester) *MessageHandlerMock {
	m := &MessageHandlerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AcceptReportMock = mMessageHandlerMockAcceptReport{mock: m}
	m.AcceptReportMock.callArgs = []*MessageHandlerMockAcceptReportParams{}

	m.HandleMessageMock = mMessageHandlerMockHandleMessage{mock: m}
	m.HandleMessageMock.callArgs = []*MessageHandlerMockHandleMessageParams{}

	return m
}

type mMessageHandlerMockAcceptReport struct {
	mock               *MessageHandlerMock
	defaultExpectation *MessageHandlerMockAcceptReportExpectation
	expectations       []*MessageHandlerMockAcceptReportExpectation

	callArgs []*MessageHandlerMockAcceptReportParams
	mutex    sync.RWMutex
}

// MessageHandlerMockAcceptReportExpectation specifies expectation struct of the MessageHandler.AcceptReport
type MessageHandlerMockAcceptReportExpectation struct {
	mock    *MessageHandlerMock
	params  *MessageHandlerMockAcceptReportParams
	results *MessageHandlerMockAcceptReportResults
	Counter uint64
}

// MessageHandlerMockAcceptReportParams contains parameters of the MessageHandler.AcceptReport
type MessageHandlerMockAcceptReportParams struct {
	ctx    context.Context
	report *apiv1.ReportResult
}

// MessageHandlerMockAcceptReportResults contains results of the MessageHandler.AcceptReport
type MessageHandlerMockAcceptReportResults struct {
	result string
	err    error
}

// Expect sets up expected params for MessageHandler.AcceptReport
func (mmAcceptReport *mMessageHandlerMockAcceptReport) Expect(ctx context.Context, report *apiv1.ReportResult) *mMessageHandlerMockAcceptReport {
	if mmAcceptReport.mock.funcAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("MessageHandlerMock.AcceptReport mock is already set by Set")
	}

	if mmAcceptReport.defaultExpectation == nil {
		mmAcceptReport.defaultExpectation = &MessageHandlerMockAcceptReportExpectation{}
	}

	mmAcceptReport.defaultExpectation.params = &MessageHandlerMockAcceptReportParams{ctx, report}
	for _, e := range mmAcceptReport.expectations {
		if minimock.Equal(e.params, mmAcceptReport.defaultExpectation.params) {
			mmAcceptReport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAcceptReport.defaultExpectation.params)
		}
	}

	return mmAcceptReport
}

// Inspect accepts an inspector function that has same arguments as the MessageHandler.AcceptReport
func (mmAcceptReport *mMessageHandlerMockAcceptReport) Inspect(f func(ctx context.Context, report *apiv1.ReportResult)) *mMessageHandlerMockAcceptReport {
	if mmAcceptReport.mock.inspectFuncAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("Inspect function is already set for MessageHandlerMock.AcceptReport")
	}

	mmAcceptReport.mock.inspectFuncAcceptReport = f

	return mmAcceptReport
}

// Return sets up results that will be returned by MessageHandler.AcceptReport
func (mmAcceptReport *mMessageHandlerMockAcceptReport) Return(result string, err error) *MessageHandlerMock {
	if mmAcceptReport.mock.funcAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("MessageHandlerMock.AcceptReport mock is already set by Set")
	}

	if mmAcceptReport.defaultExpectation == nil {
		mmAcceptReport.defaultExpectation = &MessageHandlerMockAcceptReportExpectation{mock: mmAcceptReport.mock}
	}
	mmAcceptReport.defaultExpectation.results = &MessageHandlerMockAcceptReportResults{result, err}
	return mmAcceptReport.mock
}

// Set uses given function f to mock the MessageHandler.AcceptReport method
func (mmAcceptReport *mMessageHandlerMockAcceptReport) Set(f func(ctx context.Context, report *apiv1.ReportResult) (result string, err error)) *MessageHandlerMock {
	if mmAcceptReport.defaultExpectation != nil {
		mmAcceptReport.mock.t.Fatalf("Default expectation is already set for the MessageHandler.AcceptReport method")
	}

	if len(mmAcceptReport.expectations) > 0 {
		mmAcceptReport.mock.t.Fatalf("Some expectations are already set for the MessageHandler.AcceptReport method")
	}

	mmAcceptReport.mock.funcAcceptReport = f
	return mmAcceptReport.mock
}

// When sets expectation for the MessageHandler.AcceptReport which will trigger the result defined by the following
// Then helper
func (mmAcceptReport *mMessageHandlerMockAcceptReport) When(ctx context.Context, report *apiv1.ReportResult) *MessageHandlerMockAcceptReportExpectation {
	if mmAcceptReport.mock.funcAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("MessageHandlerMock.AcceptReport mock is already set by Set")
	}

	expectation := &MessageHandlerMockAcceptReportExpectation{
		mock:   mmAcceptReport.mock,
		params: &MessageHandlerMockAcceptReportParams{ctx, report},
	}
	mmAcceptReport.expectations = append(mmAcceptReport.expectations, expectation)
	return expectation
}

// Then sets up MessageHandler.AcceptReport return parameters for the expectation previously defined by the When method
func (e *MessageHandlerMockAcceptReportExpectation) Then(result string, err error) *MessageHandlerMock {
	e.results = &MessageHandlerMockAcceptReportResults{result, err}
	return e.mock
}

// AcceptReport implements messages.MessageHandler
func (mmAcceptReport *MessageHandlerMock) AcceptReport(ctx context.Context, report *apiv1.ReportResult) (result string, err error) {
	mm_atomic.AddUint64(&mmAcceptReport.beforeAcceptReportCounter, 1)
	defer mm_atomic.AddUint64(&mmAcceptReport.afterAcceptReportCounter, 1)

	if mmAcceptReport.inspectFuncAcceptReport != nil {
		mmAcceptReport.inspectFuncAcceptReport(ctx, report)
	}

	mm_params := &MessageHandlerMockAcceptReportParams{ctx, report}

	// Record call args
	mmAcceptReport.AcceptReportMock.mutex.Lock()
	mmAcceptReport.AcceptReportMock.callArgs = append(mmAcceptReport.AcceptReportMock.callArgs, mm_params)
	mmAcceptReport.AcceptReportMock.mutex.Unlock()

	for _, e := range mmAcceptReport.AcceptReportMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.result, e.results.err
		}
	}

	if mmAcceptReport.AcceptReportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAcceptReport.AcceptReportMock.defaultExpectation.Counter, 1)
		mm_want := mmAcceptReport.AcceptReportMock.defaultExpectation.params
		mm_got := MessageHandlerMockAcceptReportParams{ctx, report}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAcceptReport.t.Errorf("MessageHandlerMock.AcceptReport got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAcceptReport.AcceptReportMock.defaultExpectation.results
		if mm_results == nil {
			mmAcceptReport.t.Fatal("No results are set for the MessageHandlerMock.AcceptReport")
		}
		return (*mm_results).result, (*mm_results).err
	}
	if mmAcceptReport.funcAcceptReport != nil {
		return mmAcceptReport.funcAcceptReport(ctx, report)
	}
	mmAcceptReport.t.Fatalf("Unexpected call to MessageHandlerMock.AcceptReport. %v %v", ctx, report)
	return
}

// AcceptReportAfterCounter returns a count of finished MessageHandlerMock.AcceptReport invocations
func (mmAcceptReport *MessageHandlerMock) AcceptReportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptReport.afterAcceptReportCounter)
}

// AcceptReportBeforeCounter returns a count of MessageHandlerMock.AcceptReport invocations
func (mmAcceptReport *MessageHandlerMock) AcceptReportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptReport.beforeAcceptReportCounter)
}

// Calls returns a list of arguments used in each call to MessageHandlerMock.AcceptReport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAcceptReport *mMessageHandlerMockAcceptReport) Calls() []*MessageHandlerMockAcceptReportParams {
	mmAcceptReport.mutex.RLock()

	argCopy := make([]*MessageHandlerMockAcceptReportParams, len(mmAcceptReport.callArgs))
	copy(argCopy, mmAcceptReport.callArgs)

	mmAcceptReport.mutex.RUnlock()

	return argCopy
}

// MinimockAcceptReportDone returns true if the count of the AcceptReport invocations corresponds
// the number of defined expectations
func (m *MessageHandlerMock) MinimockAcceptReportDone() bool {
	for _, e := range m.AcceptReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AcceptReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcceptReport != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		return false
	}
	return true
}

// MinimockAcceptReportInspect logs each unmet expectation
func (m *MessageHandlerMock) MinimockAcceptReportInspect() {
	for _, e := range m.AcceptReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessageHandlerMock.AcceptReport with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AcceptReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		if m.AcceptReportMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessageHandlerMock.AcceptReport")
		} else {
			m.t.Errorf("Expected call to MessageHandlerMock.AcceptReport with params: %#v", *m.AcceptReportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcceptReport != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		m.t.Error("Expected call to MessageHandlerMock.AcceptReport")
	}
}

type mMessageHandlerMockHandleMessage struct {
	mock               *MessageHandlerMock
	defaultExpectation *MessageHandlerMockHandleMessageExpectation
	expectations       []*MessageHandlerMockHandleMessageExpectation

	callArgs []*MessageHandlerMockHandleMessageParams
	mutex    sync.RWMutex
}

// MessageHandlerMockHandleMessageExpectation specifies expectation struct of the MessageHandler.HandleMessage
type MessageHandlerMockHandleMessageExpectation struct {
	mock    *MessageHandlerMock
	params  *MessageHandlerMockHandleMessageParams
	results *MessageHandlerMockHandleMessageResults
	Counter uint64
}

// MessageHandlerMockHandleMessageParams contains parameters of the MessageHandler.HandleMessage
type MessageHandlerMockHandleMessageParams struct {
	ctx    context.Context
	text   string
	userID int64
}

// MessageHandlerMockHandleMessageResults contains results of the MessageHandler.HandleMessage
type MessageHandlerMockHandleMessageResults struct {
	s1  string
	err error
}

// Expect sets up expected params for MessageHandler.HandleMessage
func (mmHandleMessage *mMessageHandlerMockHandleMessage) Expect(ctx context.Context, text string, userID int64) *mMessageHandlerMockHandleMessage {
	if mmHandleMessage.mock.funcHandleMessage != nil {
		mmHandleMessage.mock.t.Fatalf("MessageHandlerMock.HandleMessage mock is already set by Set")
	}

	if mmHandleMessage.defaultExpectation == nil {
		mmHandleMessage.defaultExpectation = &MessageHandlerMockHandleMessageExpectation{}
	}

	mmHandleMessage.defaultExpectation.params = &MessageHandlerMockHandleMessageParams{ctx, text, userID}
	for _, e := range mmHandleMessage.expectations {
		if minimock.Equal(e.params, mmHandleMessage.defaultExpectation.params) {
			mmHandleMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHandleMessage.defaultExpectation.params)
		}
	}

	return mmHandleMessage
}

// Inspect accepts an inspector function that has same arguments as the MessageHandler.HandleMessage
func (mmHandleMessage *mMessageHandlerMockHandleMessage) Inspect(f func(ctx context.Context, text string, userID int64)) *mMessageHandlerMockHandleMessage {
	if mmHandleMessage.mock.inspectFuncHandleMessage != nil {
		mmHandleMessage.mock.t.Fatalf("Inspect function is already set for MessageHandlerMock.HandleMessage")
	}

	mmHandleMessage.mock.inspectFuncHandleMessage = f

	return mmHandleMessage
}

// Return sets up results that will be returned by MessageHandler.HandleMessage
func (mmHandleMessage *mMessageHandlerMockHandleMessage) Return(s1 string, err error) *MessageHandlerMock {
	if mmHandleMessage.mock.funcHandleMessage != nil {
		mmHandleMessage.mock.t.Fatalf("MessageHandlerMock.HandleMessage mock is already set by Set")
	}

	if mmHandleMessage.defaultExpectation == nil {
		mmHandleMessage.defaultExpectation = &MessageHandlerMockHandleMessageExpectation{mock: mmHandleMessage.mock}
	}
	mmHandleMessage.defaultExpectation.results = &MessageHandlerMockHandleMessageResults{s1, err}
	return mmHandleMessage.mock
}

// Set uses given function f to mock the MessageHandler.HandleMessage method
func (mmHandleMessage *mMessageHandlerMockHandleMessage) Set(f func(ctx context.Context, text string, userID int64) (s1 string, err error)) *MessageHandlerMock {
	if mmHandleMessage.defaultExpectation != nil {
		mmHandleMessage.mock.t.Fatalf("Default expectation is already set for the MessageHandler.HandleMessage method")
	}

	if len(mmHandleMessage.expectations) > 0 {
		mmHandleMessage.mock.t.Fatalf("Some expectations are already set for the MessageHandler.HandleMessage method")
	}

	mmHandleMessage.mock.funcHandleMessage = f
	return mmHandleMessage.mock
}

// When sets expectation for the MessageHandler.HandleMessage which will trigger the result defined by the following
// Then helper
func (mmHandleMessage *mMessageHandlerMockHandleMessage) When(ctx context.Context, text string, userID int64) *MessageHandlerMockHandleMessageExpectation {
	if mmHandleMessage.mock.funcHandleMessage != nil {
		mmHandleMessage.mock.t.Fatalf("MessageHandlerMock.HandleMessage mock is already set by Set")
	}

	expectation := &MessageHandlerMockHandleMessageExpectation{
		mock:   mmHandleMessage.mock,
		params: &MessageHandlerMockHandleMessageParams{ctx, text, userID},
	}
	mmHandleMessage.expectations = append(mmHandleMessage.expectations, expectation)
	return expectation
}

// Then sets up MessageHandler.HandleMessage return parameters for the expectation previously defined by the When method
func (e *MessageHandlerMockHandleMessageExpectation) Then(s1 string, err error) *MessageHandlerMock {
	e.results = &MessageHandlerMockHandleMessageResults{s1, err}
	return e.mock
}

// HandleMessage implements messages.MessageHandler
func (mmHandleMessage *MessageHandlerMock) HandleMessage(ctx context.Context, text string, userID int64) (s1 string, err error) {
	mm_atomic.AddUint64(&mmHandleMessage.beforeHandleMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmHandleMessage.afterHandleMessageCounter, 1)

	if mmHandleMessage.inspectFuncHandleMessage != nil {
		mmHandleMessage.inspectFuncHandleMessage(ctx, text, userID)
	}

	mm_params := &MessageHandlerMockHandleMessageParams{ctx, text, userID}

	// Record call args
	mmHandleMessage.HandleMessageMock.mutex.Lock()
	mmHandleMessage.HandleMessageMock.callArgs = append(mmHandleMessage.HandleMessageMock.callArgs, mm_params)
	mmHandleMessage.HandleMessageMock.mutex.Unlock()

	for _, e := range mmHandleMessage.HandleMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmHandleMessage.HandleMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHandleMessage.HandleMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmHandleMessage.HandleMessageMock.defaultExpectation.params
		mm_got := MessageHandlerMockHandleMessageParams{ctx, text, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHandleMessage.t.Errorf("MessageHandlerMock.HandleMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHandleMessage.HandleMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmHandleMessage.t.Fatal("No results are set for the MessageHandlerMock.HandleMessage")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmHandleMessage.funcHandleMessage != nil {
		return mmHandleMessage.funcHandleMessage(ctx, text, userID)
	}
	mmHandleMessage.t.Fatalf("Unexpected call to MessageHandlerMock.HandleMessage. %v %v %v", ctx, text, userID)
	return
}

// HandleMessageAfterCounter returns a count of finished MessageHandlerMock.HandleMessage invocations
func (mmHandleMessage *MessageHandlerMock) HandleMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleMessage.afterHandleMessageCounter)
}

// HandleMessageBeforeCounter returns a count of MessageHandlerMock.HandleMessage invocations
func (mmHandleMessage *MessageHandlerMock) HandleMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandleMessage.beforeHandleMessageCounter)
}

// Calls returns a list of arguments used in each call to MessageHandlerMock.HandleMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHandleMessage *mMessageHandlerMockHandleMessage) Calls() []*MessageHandlerMockHandleMessageParams {
	mmHandleMessage.mutex.RLock()

	argCopy := make([]*MessageHandlerMockHandleMessageParams, len(mmHandleMessage.callArgs))
	copy(argCopy, mmHandleMessage.callArgs)

	mmHandleMessage.mutex.RUnlock()

	return argCopy
}

// MinimockHandleMessageDone returns true if the count of the HandleMessage invocations corresponds
// the number of defined expectations
func (m *MessageHandlerMock) MinimockHandleMessageDone() bool {
	for _, e := range m.HandleMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HandleMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHandleMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleMessage != nil && mm_atomic.LoadUint64(&m.afterHandleMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockHandleMessageInspect logs each unmet expectation
func (m *MessageHandlerMock) MinimockHandleMessageInspect() {
	for _, e := range m.HandleMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessageHandlerMock.HandleMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HandleMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHandleMessageCounter) < 1 {
		if m.HandleMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessageHandlerMock.HandleMessage")
		} else {
			m.t.Errorf("Expected call to MessageHandlerMock.HandleMessage with params: %#v", *m.HandleMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandleMessage != nil && mm_atomic.LoadUint64(&m.afterHandleMessageCounter) < 1 {
		m.t.Error("Expected call to MessageHandlerMock.HandleMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessageHandlerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAcceptReportInspect()

		m.MinimockHandleMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessageHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessageHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAcceptReportDone() &&
		m.MinimockHandleMessageDone()
}
