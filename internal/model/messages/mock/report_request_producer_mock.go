package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i max.ks1230/project-base/internal/model/messages.reportRequestProducer -o ./mock/report_request_producer_mock.go -n ReportRequestProducerMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ReportRequestProducerMock implements messages.reportRequestProducer
type ReportRequestProducerMock struct {
	t minimock.Tester

	funcProduceMessage          func(message []byte) (err error)
	inspectFuncProduceMessage   func(message []byte)
	afterProduceMessageCounter  uint64
	beforeProduceMessageCounter uint64
	ProduceMessageMock          mReportRequestProducerMockProduceMessage
}

// NewReportRequestProducerMock returns a mock for messages.reportRequestProducer
func NewReportRequestProducerMock(t minimock.Tester) *ReportRequestProducerMock {
	m := &ReportRequestProducerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProduceMessageMock = mReportRequestProducerMockProduceMessage{mock: m}
	m.ProduceMessageMock.callArgs = []*ReportRequestProducerMockProduceMessageParams{}

	return m
}

type mReportRequestProducerMockProduceMessage struct {
	mock               *ReportRequestProducerMock
	defaultExpectation *ReportRequestProducerMockProduceMessageExpectation
	expectations       []*ReportRequestProducerMockProduceMessageExpectation

	callArgs []*ReportRequestProducerMockProduceMessageParams
	mutex    sync.RWMutex
}

// ReportRequestProducerMockProduceMessageExpectation specifies expectation struct of the reportRequestProducer.ProduceMessage
type ReportRequestProducerMockProduceMessageExpectation struct {
	mock    *ReportRequestProducerMock
	params  *ReportRequestProducerMockProduceMessageParams
	results *ReportRequestProducerMockProduceMessageResults
	Counter uint64
}

// ReportRequestProducerMockProduceMessageParams contains parameters of the reportRequestProducer.ProduceMessage
type ReportRequestProducerMockProduceMessageParams struct {
	message []byte
}

// ReportRequestProducerMockProduceMessageResults contains results of the reportRequestProducer.ProduceMessage
type ReportRequestProducerMockProduceMessageResults struct {
	err error
}

// Expect sets up expected params for reportRequestProducer.ProduceMessage
func (mmProduceMessage *mReportRequestProducerMockProduceMessage) Expect(message []byte) *mReportRequestProducerMockProduceMessage {
	if mmProduceMessage.mock.funcProduceMessage != nil {
		mmProduceMessage.mock.t.Fatalf("ReportRequestProducerMock.ProduceMessage mock is already set by Set")
	}

	if mmProduceMessage.defaultExpectation == nil {
		mmProduceMessage.defaultExpectation = &ReportRequestProducerMockProduceMessageExpectation{}
	}

	mmProduceMessage.defaultExpectation.params = &ReportRequestProducerMockProduceMessageParams{message}
	for _, e := range mmProduceMessage.expectations {
		if minimock.Equal(e.params, mmProduceMessage.defaultExpectation.params) {
			mmProduceMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProduceMessage.defaultExpectation.params)
		}
	}

	return mmProduceMessage
}

// Inspect accepts an inspector function that has same arguments as the reportRequestProducer.ProduceMessage
func (mmProduceMessage *mReportRequestProducerMockProduceMessage) Inspect(f func(message []byte)) *mReportRequestProducerMockProduceMessage {
	if mmProduceMessage.mock.inspectFuncProduceMessage != nil {
		mmProduceMessage.mock.t.Fatalf("Inspect function is already set for ReportRequestProducerMock.ProduceMessage")
	}

	mmProduceMessage.mock.inspectFuncProduceMessage = f

	return mmProduceMessage
}

// Return sets up results that will be returned by reportRequestProducer.ProduceMessage
func (mmProduceMessage *mReportRequestProducerMockProduceMessage) Return(err error) *ReportRequestProducerMock {
	if mmProduceMessage.mock.funcProduceMessage != nil {
		mmProduceMessage.mock.t.Fatalf("ReportRequestProducerMock.ProduceMessage mock is already set by Set")
	}

	if mmProduceMessage.defaultExpectation == nil {
		mmProduceMessage.defaultExpectation = &ReportRequestProducerMockProduceMessageExpectation{mock: mmProduceMessage.mock}
	}
	mmProduceMessage.defaultExpectation.results = &ReportRequestProducerMockProduceMessageResults{err}
	return mmProduceMessage.mock
}

// Set uses given function f to mock the reportRequestProducer.ProduceMessage method
func (mmProduceMessage *mReportRequestProducerMockProduceMessage) Set(f func(message []byte) (err error)) *ReportRequestProducerMock {
	if mmProduceMessage.defaultExpectation != nil {
		mmProduceMessage.mock.t.Fatalf("Default expectation is already set for the reportRequestProducer.ProduceMessage method")
	}

	if len(mmProduceMessage.expectations) > 0 {
		mmProduceMessage.mock.t.Fatalf("Some expectations are already set for the reportRequestProducer.ProduceMessage method")
	}

	mmProduceMessage.mock.funcProduceMessage = f
	return mmProduceMessage.mock
}

// When sets expectation for the reportRequestProducer.ProduceMessage which will trigger the result defined by the following
// Then helper
func (mmProduceMessage *mReportRequestProducerMockProduceMessage) When(message []byte) *ReportRequestProducerMockProduceMessageExpectation {
	if mmProduceMessage.mock.funcProduceMessage != nil {
		mmProduceMessage.mock.t.Fatalf("ReportRequestProducerMock.ProduceMessage mock is already set by Set")
	}

	expectation := &ReportRequestProducerMockProduceMessageExpectation{
		mock:   mmProduceMessage.mock,
		params: &ReportRequestProducerMockProduceMessageParams{message},
	}
	mmProduceMessage.expectations = append(mmProduceMessage.expectations, expectation)
	return expectation
}

// Then sets up reportRequestProducer.ProduceMessage return parameters for the expectation previously defined by the When method
func (e *ReportRequestProducerMockProduceMessageExpectation) Then(err error) *ReportRequestProducerMock {
	e.results = &ReportRequestProducerMockProduceMessageResults{err}
	return e.mock
}

// ProduceMessage implements messages.reportRequestProducer
func (mmProduceMessage *ReportRequestProducerMock) ProduceMessage(message []byte) (err error) {
	mm_atomic.AddUint64(&mmProduceMessage.beforeProduceMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmProduceMessage.afterProduceMessageCounter, 1)

	if mmProduceMessage.inspectFuncProduceMessage != nil {
		mmProduceMessage.inspectFuncProduceMessage(message)
	}

	mm_params := &ReportRequestProducerMockProduceMessageParams{message}

	// Record call args
	mmProduceMessage.ProduceMessageMock.mutex.Lock()
	mmProduceMessage.ProduceMessageMock.callArgs = append(mmProduceMessage.ProduceMessageMock.callArgs, mm_params)
	mmProduceMessage.ProduceMessageMock.mutex.Unlock()

	for _, e := range mmProduceMessage.ProduceMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmProduceMessage.ProduceMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProduceMessage.ProduceMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmProduceMessage.ProduceMessageMock.defaultExpectation.params
		mm_got := ReportRequestProducerMockProduceMessageParams{message}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProduceMessage.t.Errorf("ReportRequestProducerMock.ProduceMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProduceMessage.ProduceMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmProduceMessage.t.Fatal("No results are set for the ReportRequestProducerMock.ProduceMessage")
		}
		return (*mm_results).err
	}
	if mmProduceMessage.funcProduceMessage != nil {
		return mmProduceMessage.funcProduceMessage(message)
	}
	mmProduceMessage.t.Fatalf("Unexpected call to ReportRequestProducerMock.ProduceMessage. %v", message)
	return
}

// ProduceMessageAfterCounter returns a count of finished ReportRequestProducerMock.ProduceMessage invocations
func (mmProduceMessage *ReportRequestProducerMock) ProduceMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceMessage.afterProduceMessageCounter)
}

// ProduceMessageBeforeCounter returns a count of ReportRequestProducerMock.ProduceMessage invocations
func (mmProduceMessage *ReportRequestProducerMock) ProduceMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceMessage.beforeProduceMessageCounter)
}

// Calls returns a list of arguments used in each call to ReportRequestProducerMock.ProduceMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProduceMessage *mReportRequestProducerMockProduceMessage) Calls() []*ReportRequestProducerMockProduceMessageParams {
	mmProduceMessage.mutex.RLock()

	argCopy := make([]*ReportRequestProducerMockProduceMessageParams, len(mmProduceMessage.callArgs))
	copy(argCopy, mmProduceMessage.callArgs)

	mmProduceMessage.mutex.RUnlock()

	return argCopy
}

// MinimockProduceMessageDone returns true if the count of the ProduceMessage invocations corresponds
// the number of defined expectations
func (m *ReportRequestProducerMock) MinimockProduceMessageDone() bool {
	for _, e := range m.ProduceMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProduceMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProduceMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduceMessage != nil && mm_atomic.LoadUint64(&m.afterProduceMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockProduceMessageInspect logs each unmet expectation
func (m *ReportRequestProducerMock) MinimockProduceMessageInspect() {
	for _, e := range m.ProduceMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReportRequestProducerMock.ProduceMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProduceMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProduceMessageCounter) < 1 {
		if m.ProduceMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ReportRequestProducerMock.ProduceMessage")
		} else {
			m.t.Errorf("Expected call to ReportRequestProducerMock.ProduceMessage with params: %#v", *m.ProduceMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduceMessage != nil && mm_atomic.LoadUint64(&m.afterProduceMessageCounter) < 1 {
		m.t.Error("Expected call to ReportRequestProducerMock.ProduceMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReportRequestProducerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockProduceMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReportRequestProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReportRequestProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProduceMessageDone()
}
