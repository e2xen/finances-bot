package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i max.ks1230/project-base/internal/model/reports.config -o ./mock/config_mock.go -n ConfigMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ConfigMock implements reports.config
type ConfigMock struct {
	t minimock.Tester

	funcBaseCurrency          func() (s1 string)
	inspectFuncBaseCurrency   func()
	afterBaseCurrencyCounter  uint64
	beforeBaseCurrencyCounter uint64
	BaseCurrencyMock          mConfigMockBaseCurrency
}

// NewConfigMock returns a mock for reports.config
func NewConfigMock(t minimock.Tester) *ConfigMock {
	m := &ConfigMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BaseCurrencyMock = mConfigMockBaseCurrency{mock: m}

	return m
}

type mConfigMockBaseCurrency struct {
	mock               *ConfigMock
	defaultExpectation *ConfigMockBaseCurrencyExpectation
	expectations       []*ConfigMockBaseCurrencyExpectation
}

// ConfigMockBaseCurrencyExpectation specifies expectation struct of the config.BaseCurrency
type ConfigMockBaseCurrencyExpectation struct {
	mock *ConfigMock

	results *ConfigMockBaseCurrencyResults
	Counter uint64
}

// ConfigMockBaseCurrencyResults contains results of the config.BaseCurrency
type ConfigMockBaseCurrencyResults struct {
	s1 string
}

// Expect sets up expected params for config.BaseCurrency
func (mmBaseCurrency *mConfigMockBaseCurrency) Expect() *mConfigMockBaseCurrency {
	if mmBaseCurrency.mock.funcBaseCurrency != nil {
		mmBaseCurrency.mock.t.Fatalf("ConfigMock.BaseCurrency mock is already set by Set")
	}

	if mmBaseCurrency.defaultExpectation == nil {
		mmBaseCurrency.defaultExpectation = &ConfigMockBaseCurrencyExpectation{}
	}

	return mmBaseCurrency
}

// Inspect accepts an inspector function that has same arguments as the config.BaseCurrency
func (mmBaseCurrency *mConfigMockBaseCurrency) Inspect(f func()) *mConfigMockBaseCurrency {
	if mmBaseCurrency.mock.inspectFuncBaseCurrency != nil {
		mmBaseCurrency.mock.t.Fatalf("Inspect function is already set for ConfigMock.BaseCurrency")
	}

	mmBaseCurrency.mock.inspectFuncBaseCurrency = f

	return mmBaseCurrency
}

// Return sets up results that will be returned by config.BaseCurrency
func (mmBaseCurrency *mConfigMockBaseCurrency) Return(s1 string) *ConfigMock {
	if mmBaseCurrency.mock.funcBaseCurrency != nil {
		mmBaseCurrency.mock.t.Fatalf("ConfigMock.BaseCurrency mock is already set by Set")
	}

	if mmBaseCurrency.defaultExpectation == nil {
		mmBaseCurrency.defaultExpectation = &ConfigMockBaseCurrencyExpectation{mock: mmBaseCurrency.mock}
	}
	mmBaseCurrency.defaultExpectation.results = &ConfigMockBaseCurrencyResults{s1}
	return mmBaseCurrency.mock
}

// Set uses given function f to mock the config.BaseCurrency method
func (mmBaseCurrency *mConfigMockBaseCurrency) Set(f func() (s1 string)) *ConfigMock {
	if mmBaseCurrency.defaultExpectation != nil {
		mmBaseCurrency.mock.t.Fatalf("Default expectation is already set for the config.BaseCurrency method")
	}

	if len(mmBaseCurrency.expectations) > 0 {
		mmBaseCurrency.mock.t.Fatalf("Some expectations are already set for the config.BaseCurrency method")
	}

	mmBaseCurrency.mock.funcBaseCurrency = f
	return mmBaseCurrency.mock
}

// BaseCurrency implements reports.config
func (mmBaseCurrency *ConfigMock) BaseCurrency() (s1 string) {
	mm_atomic.AddUint64(&mmBaseCurrency.beforeBaseCurrencyCounter, 1)
	defer mm_atomic.AddUint64(&mmBaseCurrency.afterBaseCurrencyCounter, 1)

	if mmBaseCurrency.inspectFuncBaseCurrency != nil {
		mmBaseCurrency.inspectFuncBaseCurrency()
	}

	if mmBaseCurrency.BaseCurrencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBaseCurrency.BaseCurrencyMock.defaultExpectation.Counter, 1)

		mm_results := mmBaseCurrency.BaseCurrencyMock.defaultExpectation.results
		if mm_results == nil {
			mmBaseCurrency.t.Fatal("No results are set for the ConfigMock.BaseCurrency")
		}
		return (*mm_results).s1
	}
	if mmBaseCurrency.funcBaseCurrency != nil {
		return mmBaseCurrency.funcBaseCurrency()
	}
	mmBaseCurrency.t.Fatalf("Unexpected call to ConfigMock.BaseCurrency.")
	return
}

// BaseCurrencyAfterCounter returns a count of finished ConfigMock.BaseCurrency invocations
func (mmBaseCurrency *ConfigMock) BaseCurrencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBaseCurrency.afterBaseCurrencyCounter)
}

// BaseCurrencyBeforeCounter returns a count of ConfigMock.BaseCurrency invocations
func (mmBaseCurrency *ConfigMock) BaseCurrencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBaseCurrency.beforeBaseCurrencyCounter)
}

// MinimockBaseCurrencyDone returns true if the count of the BaseCurrency invocations corresponds
// the number of defined expectations
func (m *ConfigMock) MinimockBaseCurrencyDone() bool {
	for _, e := range m.BaseCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BaseCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBaseCurrencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBaseCurrency != nil && mm_atomic.LoadUint64(&m.afterBaseCurrencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockBaseCurrencyInspect logs each unmet expectation
func (m *ConfigMock) MinimockBaseCurrencyInspect() {
	for _, e := range m.BaseCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ConfigMock.BaseCurrency")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BaseCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBaseCurrencyCounter) < 1 {
		m.t.Error("Expected call to ConfigMock.BaseCurrency")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBaseCurrency != nil && mm_atomic.LoadUint64(&m.afterBaseCurrencyCounter) < 1 {
		m.t.Error("Expected call to ConfigMock.BaseCurrency")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ConfigMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockBaseCurrencyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ConfigMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ConfigMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBaseCurrencyDone()
}
