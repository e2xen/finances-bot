package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i max.ks1230/finances-bot/internal/model/reports.reportAcceptor -o ./mock/report_acceptor_mock.go -n ReportAcceptorMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	pb "max.ks1230/finances-bot/api/grpc"
)

// ReportAcceptorMock implements reports.reportAcceptor
type ReportAcceptorMock struct {
	t minimock.Tester

	funcAcceptReport          func(ctx context.Context, report *pb.ReportResult) (err error)
	inspectFuncAcceptReport   func(ctx context.Context, report *pb.ReportResult)
	afterAcceptReportCounter  uint64
	beforeAcceptReportCounter uint64
	AcceptReportMock          mReportAcceptorMockAcceptReport
}

// NewReportAcceptorMock returns a mock for reports.reportAcceptor
func NewReportAcceptorMock(t minimock.Tester) *ReportAcceptorMock {
	m := &ReportAcceptorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AcceptReportMock = mReportAcceptorMockAcceptReport{mock: m}
	m.AcceptReportMock.callArgs = []*ReportAcceptorMockAcceptReportParams{}

	return m
}

type mReportAcceptorMockAcceptReport struct {
	mock               *ReportAcceptorMock
	defaultExpectation *ReportAcceptorMockAcceptReportExpectation
	expectations       []*ReportAcceptorMockAcceptReportExpectation

	callArgs []*ReportAcceptorMockAcceptReportParams
	mutex    sync.RWMutex
}

// ReportAcceptorMockAcceptReportExpectation specifies expectation struct of the reportAcceptor.AcceptReport
type ReportAcceptorMockAcceptReportExpectation struct {
	mock    *ReportAcceptorMock
	params  *ReportAcceptorMockAcceptReportParams
	results *ReportAcceptorMockAcceptReportResults
	Counter uint64
}

// ReportAcceptorMockAcceptReportParams contains parameters of the reportAcceptor.AcceptReport
type ReportAcceptorMockAcceptReportParams struct {
	ctx    context.Context
	report *pb.ReportResult
}

// ReportAcceptorMockAcceptReportResults contains results of the reportAcceptor.AcceptReport
type ReportAcceptorMockAcceptReportResults struct {
	err error
}

// Expect sets up expected params for reportAcceptor.AcceptReport
func (mmAcceptReport *mReportAcceptorMockAcceptReport) Expect(ctx context.Context, report *pb.ReportResult) *mReportAcceptorMockAcceptReport {
	if mmAcceptReport.mock.funcAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("ReportAcceptorMock.AcceptReport mock is already set by Set")
	}

	if mmAcceptReport.defaultExpectation == nil {
		mmAcceptReport.defaultExpectation = &ReportAcceptorMockAcceptReportExpectation{}
	}

	mmAcceptReport.defaultExpectation.params = &ReportAcceptorMockAcceptReportParams{ctx, report}
	for _, e := range mmAcceptReport.expectations {
		if minimock.Equal(e.params, mmAcceptReport.defaultExpectation.params) {
			mmAcceptReport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAcceptReport.defaultExpectation.params)
		}
	}

	return mmAcceptReport
}

// Inspect accepts an inspector function that has same arguments as the reportAcceptor.AcceptReport
func (mmAcceptReport *mReportAcceptorMockAcceptReport) Inspect(f func(ctx context.Context, report *pb.ReportResult)) *mReportAcceptorMockAcceptReport {
	if mmAcceptReport.mock.inspectFuncAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("Inspect function is already set for ReportAcceptorMock.AcceptReport")
	}

	mmAcceptReport.mock.inspectFuncAcceptReport = f

	return mmAcceptReport
}

// Return sets up results that will be returned by reportAcceptor.AcceptReport
func (mmAcceptReport *mReportAcceptorMockAcceptReport) Return(err error) *ReportAcceptorMock {
	if mmAcceptReport.mock.funcAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("ReportAcceptorMock.AcceptReport mock is already set by Set")
	}

	if mmAcceptReport.defaultExpectation == nil {
		mmAcceptReport.defaultExpectation = &ReportAcceptorMockAcceptReportExpectation{mock: mmAcceptReport.mock}
	}
	mmAcceptReport.defaultExpectation.results = &ReportAcceptorMockAcceptReportResults{err}
	return mmAcceptReport.mock
}

// Set uses given function f to mock the reportAcceptor.AcceptReport method
func (mmAcceptReport *mReportAcceptorMockAcceptReport) Set(f func(ctx context.Context, report *pb.ReportResult) (err error)) *ReportAcceptorMock {
	if mmAcceptReport.defaultExpectation != nil {
		mmAcceptReport.mock.t.Fatalf("Default expectation is already set for the reportAcceptor.AcceptReport method")
	}

	if len(mmAcceptReport.expectations) > 0 {
		mmAcceptReport.mock.t.Fatalf("Some expectations are already set for the reportAcceptor.AcceptReport method")
	}

	mmAcceptReport.mock.funcAcceptReport = f
	return mmAcceptReport.mock
}

// When sets expectation for the reportAcceptor.AcceptReport which will trigger the result defined by the following
// Then helper
func (mmAcceptReport *mReportAcceptorMockAcceptReport) When(ctx context.Context, report *pb.ReportResult) *ReportAcceptorMockAcceptReportExpectation {
	if mmAcceptReport.mock.funcAcceptReport != nil {
		mmAcceptReport.mock.t.Fatalf("ReportAcceptorMock.AcceptReport mock is already set by Set")
	}

	expectation := &ReportAcceptorMockAcceptReportExpectation{
		mock:   mmAcceptReport.mock,
		params: &ReportAcceptorMockAcceptReportParams{ctx, report},
	}
	mmAcceptReport.expectations = append(mmAcceptReport.expectations, expectation)
	return expectation
}

// Then sets up reportAcceptor.AcceptReport return parameters for the expectation previously defined by the When method
func (e *ReportAcceptorMockAcceptReportExpectation) Then(err error) *ReportAcceptorMock {
	e.results = &ReportAcceptorMockAcceptReportResults{err}
	return e.mock
}

// AcceptReport implements reports.reportAcceptor
func (mmAcceptReport *ReportAcceptorMock) AcceptReport(ctx context.Context, report *pb.ReportResult) (err error) {
	mm_atomic.AddUint64(&mmAcceptReport.beforeAcceptReportCounter, 1)
	defer mm_atomic.AddUint64(&mmAcceptReport.afterAcceptReportCounter, 1)

	if mmAcceptReport.inspectFuncAcceptReport != nil {
		mmAcceptReport.inspectFuncAcceptReport(ctx, report)
	}

	mm_params := &ReportAcceptorMockAcceptReportParams{ctx, report}

	// Record call args
	mmAcceptReport.AcceptReportMock.mutex.Lock()
	mmAcceptReport.AcceptReportMock.callArgs = append(mmAcceptReport.AcceptReportMock.callArgs, mm_params)
	mmAcceptReport.AcceptReportMock.mutex.Unlock()

	for _, e := range mmAcceptReport.AcceptReportMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAcceptReport.AcceptReportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAcceptReport.AcceptReportMock.defaultExpectation.Counter, 1)
		mm_want := mmAcceptReport.AcceptReportMock.defaultExpectation.params
		mm_got := ReportAcceptorMockAcceptReportParams{ctx, report}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAcceptReport.t.Errorf("ReportAcceptorMock.AcceptReport got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAcceptReport.AcceptReportMock.defaultExpectation.results
		if mm_results == nil {
			mmAcceptReport.t.Fatal("No results are set for the ReportAcceptorMock.AcceptReport")
		}
		return (*mm_results).err
	}
	if mmAcceptReport.funcAcceptReport != nil {
		return mmAcceptReport.funcAcceptReport(ctx, report)
	}
	mmAcceptReport.t.Fatalf("Unexpected call to ReportAcceptorMock.AcceptReport. %v %v", ctx, report)
	return
}

// AcceptReportAfterCounter returns a count of finished ReportAcceptorMock.AcceptReport invocations
func (mmAcceptReport *ReportAcceptorMock) AcceptReportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptReport.afterAcceptReportCounter)
}

// AcceptReportBeforeCounter returns a count of ReportAcceptorMock.AcceptReport invocations
func (mmAcceptReport *ReportAcceptorMock) AcceptReportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcceptReport.beforeAcceptReportCounter)
}

// Calls returns a list of arguments used in each call to ReportAcceptorMock.AcceptReport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAcceptReport *mReportAcceptorMockAcceptReport) Calls() []*ReportAcceptorMockAcceptReportParams {
	mmAcceptReport.mutex.RLock()

	argCopy := make([]*ReportAcceptorMockAcceptReportParams, len(mmAcceptReport.callArgs))
	copy(argCopy, mmAcceptReport.callArgs)

	mmAcceptReport.mutex.RUnlock()

	return argCopy
}

// MinimockAcceptReportDone returns true if the count of the AcceptReport invocations corresponds
// the number of defined expectations
func (m *ReportAcceptorMock) MinimockAcceptReportDone() bool {
	for _, e := range m.AcceptReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AcceptReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcceptReport != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		return false
	}
	return true
}

// MinimockAcceptReportInspect logs each unmet expectation
func (m *ReportAcceptorMock) MinimockAcceptReportInspect() {
	for _, e := range m.AcceptReportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReportAcceptorMock.AcceptReport with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AcceptReportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		if m.AcceptReportMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ReportAcceptorMock.AcceptReport")
		} else {
			m.t.Errorf("Expected call to ReportAcceptorMock.AcceptReport with params: %#v", *m.AcceptReportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcceptReport != nil && mm_atomic.LoadUint64(&m.afterAcceptReportCounter) < 1 {
		m.t.Error("Expected call to ReportAcceptorMock.AcceptReport")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReportAcceptorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAcceptReportInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReportAcceptorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReportAcceptorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAcceptReportDone()
}
